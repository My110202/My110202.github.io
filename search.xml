<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Post</title>
    <url>/2020/06/06/Post/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>git使用记录</title>
    <url>/2020/06/09/git%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="git-bash-unix与linux风格的命令行-使用最多"><a href="#git-bash-unix与linux风格的命令行-使用最多" class="headerlink" title="git bash: unix与linux风格的命令行(使用最多)"></a>git bash: unix与linux风格的命令行(使用最多)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd: 切换目录</span><br><span class="line">cd ~	回到home(最顶层目录)</span><br><span class="line">cd 		直接cd回到默认目录</span><br><span class="line">cd ..	回到上一级目录</span><br><span class="line">pwd		查看当前所在目录路径</span><br><span class="line">ls(ll)	都是列出当前目录中的所有文件,区别是ll列出的内容更为详细(包括时间)</span><br><span class="line">mkdir hellow	新建一个文件夹(hello文件夹)</span><br><span class="line">touch index.js	新建一个文件(index.js)</span><br><span class="line">rm -r	删除一个文件夹(rm -r hello 删除hello文件夹)</span><br><span class="line">mv	移动文件</span><br><span class="line">mv test hello	移动test文件到hello文件夹</span><br><span class="line">reset	重新初始化终端/清屏</span><br><span class="line">clear	清屏</span><br><span class="line">history		查看历史动作</span><br><span class="line">help	帮助</span><br><span class="line">exit	退出命令框</span><br><span class="line">cat hello	显示hello文件内容</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git config -l	查看现在的git环境的详细配置</span><br></pre></td></tr></table></figure>

<h3 id="git工作流程"><a href="#git工作流程" class="headerlink" title="git工作流程"></a>git工作流程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.在工作目录中添加,修改文件</span><br><span class="line">2.将需要进行版本管理的文件放入暂存区</span><br><span class="line">3.将暂存区的文件提交到git仓库</span><br><span class="line">因此,git管理的文件由三种状态:已修改(modified),已暂存(staged),已提交(committed)</span><br><span class="line">step1:git add	添加到暂存区</span><br><span class="line">step2:git commit	提交到仓库</span><br><span class="line">step3:git push		推送到远程仓库</span><br></pre></td></tr></table></figure>

<h3 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">四种状态</span><br><span class="line">untracked: 未跟踪,不被git管理的文件,通过git add 文件名 命令,状态变为staged</span><br><span class="line">unmodify: 未修改,被git管理,此时文件的内容与版本库中的文件内容一致,这种类型的文件由两种去除,如果被修改,状态		就变为modified,如果使用git rm &#39;文件名&#39; 移出版本库,状态变成untraked</span><br><span class="line">modified: 修改过的,有两个去向,使用git add &#39;文件名&#39; 将文件暂存起来,另一个是使用git checkout 则丢弃修改,状		态变为unmodified</span><br><span class="line">staged: 暂存状态,有两个去向,使用git commit -m&quot;&quot;提交到仓库,此时库中的文件和本地的一致,文件状态变为			unmodified,另一个使用git reset HEAD &#39;文件名&#39; 取消暂存,文件状态变为unmodified</span><br><span class="line">git status	查看所有文件状态</span><br><span class="line">git status hello	查看hello文件状态</span><br></pre></td></tr></table></figure>

<h3 id="git-取消文件跟踪"><a href="#git-取消文件跟踪" class="headerlink" title="git 取消文件跟踪"></a>git 取消文件跟踪</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对某个文件取消跟踪</span><br><span class="line">git rm --cached hello.vue	取消hello.vue的跟踪,本地hello.vue这个文件还有</span><br><span class="line">git rm --f hello.vue	取消hello.vue的跟踪,并在本地把hello.vue这个文件删除</span><br><span class="line">对所有文件都取消跟踪</span><br><span class="line">git rm -r --cached .	取消所有文件的跟踪,但是本地还有这些文件</span><br><span class="line">git rm -r --f .		取消所有文件的跟踪,并且删除了本地文件</span><br></pre></td></tr></table></figure>

<h3 id="git-丢弃已修改的文件"><a href="#git-丢弃已修改的文件" class="headerlink" title="git 丢弃已修改的文件"></a>git 丢弃已修改的文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">丢弃某个文件的修改</span><br><span class="line">git checkout -- hello.vue	丢弃hello.vue的修改</span><br><span class="line">丢弃所有文件的修改</span><br><span class="line">git checkout .		</span><br><span class="line">本地新增了一些文件,没有git add 到暂存区,想放弃修改</span><br><span class="line">rm hello.js		删除hello.js文件</span><br></pre></td></tr></table></figure>

<h3 id="撤销git-add-撤销已添加至暂存区的文件"><a href="#撤销git-add-撤销已添加至暂存区的文件" class="headerlink" title="撤销git add  (撤销已添加至暂存区的文件)"></a>撤销git add  (撤销已添加至暂存区的文件)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset HEAD hello.js		撤销已经add到暂存区的hello.js</span><br><span class="line">git reset HEAD .	撤销add到暂存区的所有文件</span><br></pre></td></tr></table></figure>



<h3 id="git-add-添加文件与目录"><a href="#git-add-添加文件与目录" class="headerlink" title="git add 添加文件与目录"></a>git add 添加文件与目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .	添加当前目录的所有文件到暂存区</span><br><span class="line">git add --all	添加所有的文件</span><br><span class="line">以下是添加指定文件夹或文件到暂存区</span><br><span class="line">git add hello	添加hello文件夹(包括子目录)到暂存区(要先进入到hello文件夹的父文件夹)</span><br><span class="line">git add test.js		添加test.js文件到暂存区(要先进入到hello文件夹的父文件夹)</span><br><span class="line">git reset HEAD test.js	撤销刚刚的git add操作</span><br></pre></td></tr></table></figure>

<h3 id="在本地新建分支首次推送到远程-在本地新建分支之后要先推送到远程"><a href="#在本地新建分支首次推送到远程-在本地新建分支之后要先推送到远程" class="headerlink" title="在本地新建分支首次推送到远程(在本地新建分支之后要先推送到远程)"></a>在本地新建分支首次推送到远程(在本地新建分支之后要先推送到远程)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当在本地新建一个fb-dev分支,git push时会提示 git push --set-upstream origin fb-dev</span><br><span class="line">出现这个提示的原因: 因为在远程没有与本地fb-dev相对应的分支</span><br><span class="line">所以第一次git push时会提示</span><br><span class="line">使用git push --set-upstream origin fb-dev这个命令推送分支后,以后再推送fb-dev分支的时候就可以直接使用git push了</span><br><span class="line">git push --set-upstream origin fb-dev 的缩写形式为 git push -u origin fb-dev</span><br></pre></td></tr></table></figure>

<h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git branch devmy 创建一个分支(devmy分支)</span><br><span class="line">git branch -d devmy 删除分支(devmy)</span><br><span class="line">git push origin --<span class="keyword">delete</span> devmy 删除远程分支devmy</span><br><span class="line">git checkout devmy 切换分支(切换到devmy分支)</span><br><span class="line">git branch 查看当前所在分支</span><br><span class="line">git branch -a 查看所有分支</span><br><span class="line"></span><br><span class="line">git checkout -b fb-form origin/fb-form	把远程fb-form分支拉取到本地并直接切换到本地fb-form分支</span><br><span class="line">git checkout -b fb-workorder origin		从远程master拉取一个新的分支</span><br></pre></td></tr></table></figure>



<h3 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard  HEAD^		回退到上一版本</span><br></pre></td></tr></table></figure>

<h3 id="git-stash-用法"><a href="#git-stash-用法" class="headerlink" title="git stash 用法"></a>git stash 用法</h3><ul>
<li>git stash 命令将当前的工作状态保存到git 栈,在需要的时候再恢复</li>
</ul>
<h4 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">保存当前的工作区与暂存区的状态，把当前的工作隐藏起来，等以后需要的时候再恢复,git stash 这个命令可以多次使用，每次使用都会新加一个stash@&#123;num&#125;，num是编号</span><br></pre></td></tr></table></figure>

<h4 id="git-stash-save"><a href="#git-stash-save" class="headerlink" title="git stash save"></a>git stash save</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">作用同git stash, 区别是可以加注释</span><br><span class="line">如:git stash save &quot;your stash message&quot;</span><br></pre></td></tr></table></figure>





<h4 id="git-stash-pop"><a href="#git-stash-pop" class="headerlink" title="git stash pop"></a>git stash pop</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认恢复git stash栈中最新的一个stash@&#123;num&#125;,建议在git栈中只有一条的时候时候,以免混乱</span><br></pre></td></tr></table></figure>

<h4 id="git-stash-list"><a href="#git-stash-list" class="headerlink" title="git stash list"></a>git stash list</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看所有被隐藏的文件列表</span><br></pre></td></tr></table></figure>

<h4 id="git-stash-apply"><a href="#git-stash-apply" class="headerlink" title="git stash apply"></a>git stash apply</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">恢复被隐藏的文件, 但是在git栈中的这个不删除,用法: git stash apply@&#123;0&#125;</span><br></pre></td></tr></table></figure>

<h4 id="git-stash-drop"><a href="#git-stash-drop" class="headerlink" title="git stash drop"></a>git stash drop</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">删除指定的一个进度,默认删除最新的进度,用法:git stash drop stash@&#123;0&#125;</span><br></pre></td></tr></table></figure>

<h4 id="git-stash-clear"><a href="#git-stash-clear" class="headerlink" title="git stash clear"></a>git stash clear</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">删除所有存储的进度</span><br></pre></td></tr></table></figure>

<h4 id="git-stash-show"><a href="#git-stash-show" class="headerlink" title="git stash show"></a>git stash show</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">显示stash的具体内容是什么,用法:git stash show stash@&#123;0&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>listTocascader列表转换成树</title>
    <url>/2020/06/29/list%E8%BD%AC%E6%88%90el-cascader%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<ul>
<li><p>先看效果图</p>
<p><img src="https://pic.downk.cc/item/5ef9913e14195aa594195384.png" alt=""></p>
</li>
</ul>
<a id="more"></a>

<ul>
<li><p>再看实现方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">--</span> <span class="attr">html</span> <span class="attr">--</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">el-cascader</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-model</span>=<span class="string">"classify"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">size</span>=<span class="string">"mini"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">"所有班级"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:show-all-levels</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:props</span>=<span class="string">"classifyProps"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:options</span>=<span class="string">"classifyOptions"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">clearable</span> <span class="attr">style</span>=<span class="string">"width:100%"</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">change</span>=<span class="string">"selectChange"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-cascader</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      classify: [],</span><br><span class="line">      classifyProps: &#123;</span><br><span class="line">        value: <span class="string">'id'</span>,</span><br><span class="line">        label: <span class="string">'name'</span>,</span><br><span class="line">        children: <span class="string">'children'</span>,</span><br><span class="line">        expandTrigger: <span class="string">'hover'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      classifyData: [</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'一年纪'</span>, <span class="attr">parent</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'二年纪'</span>, <span class="attr">parent</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'三年纪'</span>, <span class="attr">parent</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">'一年纪一班'</span>, <span class="attr">parent</span>: <span class="number">1</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">'一年纪二班'</span>, <span class="attr">parent</span>: <span class="number">1</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">name</span>: <span class="string">'一年纪一班1组'</span>, <span class="attr">parent</span>: <span class="number">4</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">name</span>: <span class="string">'二年纪一班'</span>, <span class="attr">parent</span>: <span class="number">2</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">8</span>, <span class="attr">name</span>: <span class="string">'三年纪一班'</span>, <span class="attr">parent</span>: <span class="number">3</span> &#125;</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">       classifyOptions () &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.listToCascader(<span class="keyword">this</span>.classifyData, <span class="literal">null</span>)</span><br><span class="line">       &#125;</span><br><span class="line">  	&#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        listToCascader (list, pid) &#123;</span><br><span class="line">          <span class="keyword">let</span> cascaderData = []</span><br><span class="line">          <span class="keyword">let</span> treeLst = list</span><br><span class="line">          treeLst.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.parent === pid) &#123;</span><br><span class="line">              <span class="keyword">const</span> children = <span class="keyword">this</span>.listToCascader(treeLst, item.id)</span><br><span class="line">              <span class="keyword">if</span> (children &amp;&amp; (children.length &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">                treeLst[index].children = children</span><br><span class="line">              &#125;</span><br><span class="line">              cascaderData.push(treeLst[index])</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="keyword">return</span> cascaderData</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>核心算法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 采用递归的方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">listToCascader</span> (<span class="params">list, pid</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cascaderData = []</span><br><span class="line">  <span class="keyword">let</span> treeLst = list</span><br><span class="line">  treeLst.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.parent === pid) &#123;</span><br><span class="line">      <span class="keyword">const</span> children = <span class="keyword">this</span>.listToCascader(treeLst, item.id)</span><br><span class="line">      <span class="keyword">if</span> (children &amp;&amp; (children.length &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">        treeLst[index].children = children</span><br><span class="line">      &#125;</span><br><span class="line">      cascaderData.push(treeLst[index])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> cascaderData</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>element-ui相关</category>
      </categories>
      <tags>
        <tag>vue element</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-element父组件中验证子组件表单</title>
    <url>/2020/06/19/vue-element%E7%88%B6%E7%BB%84%E4%BB%B6%E4%B8%AD%E9%AA%8C%E8%AF%81%E5%AD%90%E7%BB%84%E4%BB%B6%E8%A1%A8%E5%8D%95/</url>
    <content><![CDATA[<h2 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue</span><br></pre></td></tr></table></figure>



<h2 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h2>]]></content>
      <categories>
        <category>element-ui相关</category>
      </categories>
      <tags>
        <tag>vue element</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>前端项目工具合集解读</title>
    <url>/2020/06/13/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%86%E8%A7%A3%E8%AF%BB/</url>
    <content><![CDATA[<h2 id="1-vue-js"><a href="#1-vue-js" class="headerlink" title="1.vue.js"></a>1.vue.js</h2><h3 id="vue是什么"><a href="#vue是什么" class="headerlink" title="vue是什么"></a>vue是什么</h3><ul>
<li><p>vue.js是一套用于构建用户界面的渐进式框架.</p>
</li>
<li><p>简单理解就是一个前端框架, 是一个已经搭建好的框架, 与jQuery库相比, 可以更好的实现代码复用, 减少工作量.  </p>
<a id="more"></a>

</li>
</ul>
<h3 id="vue的MVVM设计模式是什么"><a href="#vue的MVVM设计模式是什么" class="headerlink" title="vue的MVVM设计模式是什么"></a>vue的MVVM设计模式是什么</h3><ul>
<li>mvvm 是 model(模型层) view(视图层) viewmodel(模型层与视图层的调度者)的缩写。mvvm提供了数据的双向绑定，通过双向数据绑定把model层和view层连接起来，不用操作dom。</li>
</ul>
<h3 id="vue的两个核心"><a href="#vue的两个核心" class="headerlink" title="vue的两个核心"></a>vue的两个核心</h3><ul>
<li>1.响应式的数据绑定：当数据发生改变，视图可以自动更新，可以不用关心dom操作，而专心数据处理。</li>
<li>2.可组合的视图组件：一个页面可以看作是若干个小的组件组合拼接而成，并且小的组件也方便的复用。</li>
</ul>
<h2 id="2-vueCLI"><a href="#2-vueCLI" class="headerlink" title="2.vueCLI"></a>2.vueCLI</h2><h3 id="vuecli是什么"><a href="#vuecli是什么" class="headerlink" title="vuecli是什么"></a>vuecli是什么</h3><ul>
<li>vueCLI是用于快速vue.js开发的完整系统.</li>
</ul>
<h3 id="使用vuecli的目的"><a href="#使用vuecli的目的" class="headerlink" title="使用vuecli的目的"></a>使用vuecli的目的</h3><ul>
<li>1.提供了零配置快速原型</li>
<li>2.提供了运行时依赖</li>
<li>3.提供了丰富的官方插件库</li>
<li>4.完整的图形用户界面。</li>
</ul>
<h2 id="3-webpack"><a href="#3-webpack" class="headerlink" title="3.webpack"></a>3.webpack</h2><h3 id="webpack是什么"><a href="#webpack是什么" class="headerlink" title="webpack是什么"></a>webpack是什么</h3><ul>
<li><em>webpack</em> 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。静态资源（js，css，less，scss，html，图片等）</li>
<li>简单理解就是一个前端项目的打包工具</li>
</ul>
<h2 id="4-node-js"><a href="#4-node-js" class="headerlink" title="4.node.js"></a>4.node.js</h2><h3 id="node-js是什么"><a href="#node-js是什么" class="headerlink" title="node.js是什么"></a>node.js是什么</h3><ul>
<li>node.js是JavaScript的一种运行环境，是一个服务端的JavaScript的解释器。再或者说是运行在服务端的JavaScript。</li>
</ul>
<h3 id="npm是什么"><a href="#npm是什么" class="headerlink" title="npm是什么"></a>npm是什么</h3><ul>
<li>npm是随同node.js一起安装的包管理工具，就是node.js内置的包管理器</li>
</ul>
<h3 id="cnpm是什么"><a href="#cnpm是什么" class="headerlink" title="cnpm是什么"></a>cnpm是什么</h3><ul>
<li>因为npm安装插件是从国外服务器下载，受网络的影响比较大，可能会出现异常，，如果npm的服务器在中国就好了，所以我们乐于分享的淘宝团队干了这事。所以cnpm是一个完整 npmjs.org 镜像，用cnpm安装比用npm安装会快一些。</li>
</ul>
<h2 id="5-vue，vuecli，webpack的关系"><a href="#5-vue，vuecli，webpack的关系" class="headerlink" title="5.vue，vuecli，webpack的关系"></a>5.vue，vuecli，webpack的关系</h2><ul>
<li>vueCLI是vue的脚手架，其作用就是自动生成vue+webpack的项目模板，包括依赖库，一些插件等。</li>
</ul>
<h2 id="6-vue，webpack，node-js的关系"><a href="#6-vue，webpack，node-js的关系" class="headerlink" title="6.vue，webpack，node.js的关系"></a>6.vue，webpack，node.js的关系</h2><ul>
<li>vue是可以快速生成前端项目的一个框架，webpack是前端项目的打包工具，而webpack的运行环境又是基于node.js开发出来的,没有node是打包不了的</li>
</ul>
<h2 id="7-devtools"><a href="#7-devtools" class="headerlink" title="7.devtools"></a>7.devtools</h2><ul>
<li>vue-devtools  是一款基于chrome浏览器的插件，用于vue应用的调试，这款vue调试神器可以极大地提高我们的调试效率。帮助我们快速的调试开发vue应用。比如可以事实的看到数据的变化。</li>
</ul>
]]></content>
      <categories>
        <category>vue相关</category>
      </categories>
      <tags>
        <tag>vue vueCLI webpack node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>vue相关面试题</title>
    <url>/2020/06/09/vue%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1-对vue的理解"><a href="#1-对vue的理解" class="headerlink" title="1.对vue的理解"></a>1.对vue的理解</h2><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">vue: vue核心的一个概念,就是让用户不在操作dom元素,让程序员有更多的时间去关注业务逻辑,提高开发效率</span><br><span class="line">vue 是什么是一套前端开发框架(侧重的是业务逻辑),不用考虑怎么操作dom,只要考虑逻辑和数据,也就是响应式数据,数据改了,不用改代码,界面也立刻就变了.因此让程序员有更多的时间去关注业务逻辑,提高开发效率</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="2-框架和库的区别"><a href="#2-框架和库的区别" class="headerlink" title="2.框架和库的区别"></a>2.框架和库的区别</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">框架:是一套完整的解决方案;对项目的侵入性较大,项目如果需要更换框架,则需要重新架构整个项目</span><br><span class="line">库(插件):提供某一个小功能,对项目的侵入性较小,如果某个库无法完成某些需求,可以很容易的切换到其他库实         现需求</span><br></pre></td></tr></table></figure>

<h2 id="3-Node-后端-的MVC-和-前端的MVVM之间的区别"><a href="#3-Node-后端-的MVC-和-前端的MVVM之间的区别" class="headerlink" title="3.Node(后端)的MVC 和 前端的MVVM之间的区别"></a>3.Node(后端)的MVC 和 前端的MVVM之间的区别</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MVC(Model模型层,主要处理数据 View视图层,就是前端页面 Controller控制器,处理业务逻辑) 是后端的分层     开发概念</span><br><span class="line">MVVM(Model-View-ViewModel的简写) 是前端视图层的分层开发思想,主要把每个页面分成了M V 和VM,VM是	MVVM思想的核心,因为VM是M和V之间的调度者</span><br><span class="line">	 M                           VM                             			 V</span><br><span class="line">这里的M保存的是每个    VM是一个调度着,分割了M和V,每当V层                就是每个页面中的HTML结构</span><br><span class="line">页面中单独的数据     想要获取或者保存数据的时候,都要由VM做中间的处理</span><br><span class="line"></span><br><span class="line">前端页面中使用MVVM的思想,主要是为了让我们开发更加方便,因为MVVM提供了数据的双向绑定,通过双向数据绑定把view层和model层连接了起来,因此开发只需关注业务逻辑,不需要手动操作DOM,不需要关注数据状态的同步问题,从而提高开发效率.数据的双向绑定是由VM提供的</span><br></pre></td></tr></table></figure>

<h2 id="4-vue的生命周期函数"><a href="#4-vue的生命周期函数" class="headerlink" title="4.vue的生命周期函数"></a>4.vue的生命周期函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">什么是声明周期:从Vue实例创建,运行,到销毁阶段,总是伴随着各种各样的事件,这些事件统称为生命周期生命周     期钩子就是生命周期事件的别名</span><br><span class="line"></span><br><span class="line">组件创建阶段的四个生命周期函数</span><br><span class="line">1.beforeCreate:在执行这个函数的时候,data和methods中的数据还没有初始化,这时候只是刚刚初始化了一个       空的vue实例</span><br><span class="line">2.created:在create中,data和methods都已经被初始化好了,如果想要操作data中的数据或者调用methods中       的方法,最早只能在created中操作</span><br><span class="line">3.beforeMount:此函数执行的时候,模板已经在内存中编译好了,但是尚未挂载到页面上去,此时页面还旧的</span><br><span class="line">4.mounted:页面已经渲染完毕,如果想要操作页面上的dom元素,最早只能在mounted中</span><br><span class="line"></span><br><span class="line">组件运行阶段的生命周期函数</span><br><span class="line">5.beforeUpdate:当执行这个函数的时候.数据已经改变,只是更新过的数据还在内存中,此时页面中显示的数据       还是旧的</span><br><span class="line">6.updated:当执行这个函数的时候,页面中的数据已经是最新的了</span><br><span class="line"></span><br><span class="line">组件销毁阶段的生命周期函数</span><br><span class="line">7.beforeDestroy:当执行这个函数的时候,实例身上的所有数据和方法等都还是可用状态,还没有真正执行销毁</span><br><span class="line">8.destroyed:当执行这个函数的时候,组件已经被销毁,此时组件中的所有数据和方法都已经不可用了</span><br><span class="line"></span><br><span class="line">&lt;keep-alive&gt; 的作用,让组件不被销毁,当跳转到另一个页面的时候,在回来还是原来的状态</span><br><span class="line">当组件在&lt;keep-alive&gt;&lt;&#x2F;keep-alive&gt;中被切换的时候,会触发activated 和 deactivated 这两个生命周期</span><br><span class="line">9.activated:组件被激活的时候会调用(组件看得见的时候)</span><br><span class="line">10.deactivated:未激活的时候被调用(组件看不见的时候)</span><br></pre></td></tr></table></figure>

<h2 id="5-计算属性的用法"><a href="#5-计算属性的用法" class="headerlink" title="5.计算属性的用法"></a>5.计算属性的用法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    author: <span class="built_in">String</span> <span class="comment">//author是父组件传递进来的数据</span></span><br><span class="line">&#125;</span><br><span class="line">computed: &#123;</span><br><span class="line">    name () &#123;	<span class="comment">//name的值依赖于author的值,author的值改变,相应的name值也会改变</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.author</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-过滤器的用法"><a href="#6-过滤器的用法" class="headerlink" title="6.过滤器的用法"></a>6.过滤器的用法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//局部过滤器,在某个组件内部,与methods同级</span></span><br><span class="line">filters:&#123;</span><br><span class="line">	formatTime(value)&#123;</span><br><span class="line">        <span class="comment">//value是需要格式化的值</span></span><br><span class="line">        <span class="keyword">return</span>	<span class="comment">//最后返回的数据就是已经过滤后的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局过滤器,写在main.js中</span></span><br><span class="line"><span class="comment">//参数1:过滤器的名字,参数2:回调函数</span></span><br><span class="line">Vue.filter(<span class="string">'formatTime'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value, format</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> moment(value).format(format)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="7-侦听器的用法"><a href="#7-侦听器的用法" class="headerlink" title="7.侦听器的用法"></a>7.侦听器的用法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//带参数的侦听器,可以比较两次数据的异同</span></span><br><span class="line">watch:&#123;</span><br><span class="line">	msg(newValue,oldValue)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//深度侦听</span></span><br><span class="line">watch:&#123;</span><br><span class="line">    <span class="comment">//如果侦听的是对象,修改的数据是对象里的属性,需要用到深度侦听或者直接侦听 对象.属性</span></span><br><span class="line">    obj:&#123;</span><br><span class="line">        <span class="comment">//侦听的对象</span></span><br><span class="line">        handler(newValue,oldValue)&#123;	</span><br><span class="line">      <span class="comment">//侦听复杂数据类型的时候,传入的参数,是数据的地址,所以两个参数的值是一样的,基本数据类型的两个参数是不同的</span></span><br><span class="line">           <span class="comment">// 但是如果侦听的是精确到对象属性名,就可以避免这个问题了(新旧值是一样的)</span></span><br><span class="line">            <span class="built_in">console</span>.log(newValue,oldValue)	<span class="comment">//true</span></span><br><span class="line">        &#125;</span><br><span class="line">        deep:<span class="literal">true</span>	<span class="comment">//开启深度侦听</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-vue中methods-computed-watch三者的区别"><a href="#8-vue中methods-computed-watch三者的区别" class="headerlink" title="8.vue中methods,computed,watch三者的区别"></a>8.vue中methods,computed,watch三者的区别</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods里面的方法,一般是有触发条件的,需要调用才会执行</span><br><span class="line">computed计算属性,计算属性是根据他的依赖值计算的,当依赖值发生改变.其也会跟着改变,计算属性是依赖缓存</span><br><span class="line">	使用:<span class="number">1.</span>模板中使用&#123;&#123;&#125;&#125;渲染  <span class="number">2.</span>需要<span class="keyword">return</span>  <span class="number">3.</span>其他属性变化时不会触发当前属性变化,把耗能的计算都放在这里</span><br><span class="line">watch:方法名必须是属性名,并且要用字符串包起来,不需要<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">filter:需要参数</span><br><span class="line"></span><br><span class="line">watch 和 updated 的区别</span><br><span class="line">watch只会监听你在watch里写的那些属性,仅仅是数据发生改变</span><br><span class="line">updated数据发生改变并且界面上更新完毕,不能监听路由的数据(网址),所有数据发生改变都会调用updated</span><br></pre></td></tr></table></figure>

<h2 id="9-双向数据绑定的原理"><a href="#9-双向数据绑定的原理" class="headerlink" title="9.双向数据绑定的原理"></a>9.双向数据绑定的原理</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txt"</span> <span class="attr">v-model</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> txt = <span class="built_in">document</span>.querySelector(<span class="string">'[v-model]'</span>)</span><br><span class="line">     txt.oninput = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">// console.log(txt.value)</span></span><br><span class="line">        data.name = txt.value      </span><br><span class="line">   	 &#125;</span><br><span class="line">     <span class="comment">// 给对象添加属性的语法</span></span><br><span class="line">     <span class="keyword">var</span> data = &#123;&#125;</span><br><span class="line"><span class="comment">//Object.defineProperty()是一种es6的给对象添加属性的方式,这样加属性的好处是,可以监听属性的赋值和取值,</span></span><br><span class="line"><span class="comment">//当给这个属性赋值时就会调用set方法,取值时就会调用get方法</span></span><br><span class="line">比如以下</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">'name'</span>,&#123;</span><br><span class="line">    <span class="keyword">get</span>()&#123;</span><br><span class="line">        <span class="comment">//规范 取值方式 return _属性名</span></span><br><span class="line">        <span class="keyword">return</span> _name</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>(value)&#123; <span class="comment">//value是你赋的值</span></span><br><span class="line">        <span class="comment">//规范 赋值方式 _属性名=value</span></span><br><span class="line">        _name = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//双向绑定原理----比如把input输入的值双向绑定到p标签中</span></span><br><span class="line"><span class="comment">//使用Object.defineProperty()方法给对象动态的添加一个属性,这个方法有三个参数,参数1是对象,参数2是要给对象添加的属性,参数3是一个对象,对象里有get和set方法,当取属性的值时调用get方法,当给属性赋值时调用set方法.然后给input标签绑定一个输入事件,取到input标签的值赋值给对象的属性,此时会调用set方法,在set方法里再把值赋给p标签,此时就完成了数据的双向绑定</span></span><br></pre></td></tr></table></figure>

<h2 id="10-vue3-x双向绑定原理"><a href="#10-vue3-x双向绑定原理" class="headerlink" title="10.vue3.x双向绑定原理"></a>10.vue3.x双向绑定原理</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue3.x双向绑定原理,与vue2.x双向绑定原理其实是一样的,只是他用的是Proxy,它的特点是对象里的任何属性都会调用get和set方法,而且它能监听多个属性</span></span><br><span class="line"><span class="comment">//使用的是proxy(),它里面有两个参数,参数1是需要绑定的对象,参数2是一个对象</span></span><br><span class="line"><span class="keyword">let</span> proxyData = <span class="keyword">new</span> <span class="built_in">Proxy</span>(data,&#123;</span><br><span class="line">    <span class="keyword">get</span>(obj,prop)&#123;</span><br><span class="line">        <span class="comment">//obj就是绑定的data对象,props就是要给对象添加的属性</span></span><br><span class="line">        <span class="keyword">return</span> obj[prop]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span>(obj,prop,value)&#123;</span><br><span class="line">    	<span class="comment">// value就是赋的值</span></span><br><span class="line">    	obj[prop] = value</span><br><span class="line"> 		<span class="comment">//最后再把值赋值给p标签</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>web前端面试</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>使用$route打开新的窗口</title>
    <url>/2020/06/23/%E4%BD%BF%E7%94%A8$router%E6%89%93%E5%BC%80%E6%96%B0%E7%9A%84%E7%AA%97%E5%8F%A3/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> routeData = <span class="keyword">this</span>.$router.resolve(&#123;<span class="attr">path</span>: <span class="string">`detail/12`</span>,<span class="attr">query</span>:&#123;<span class="attr">status</span>: <span class="string">'published'</span>&#125;)</span><br><span class="line"><span class="built_in">window</span>.open(routeData.href, <span class="string">'_blank'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//resolve方法会返回一个跳转路由对象</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>vue相关</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue.config.js配置的理解</title>
    <url>/2020/06/11/vue.config.js/</url>
    <content><![CDATA[<h2 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a>vue.config.js</h2><h3 id="publicPath"><a href="#publicPath" class="headerlink" title="publicPath"></a>publicPath</h3><ul>
<li><p>部署应用包时的基本URL,默认情况下,Vue CLI 会假设你的应用是被部署在一个域名的根路径上,例如 <code>https://www.my-app.com/</code>。如果应用要被部署在一个子路径上，你就需要用这个选项指定这个子路径。例如，如果你的应用被部署在 <code>https://www.my-app.com/my-app/</code>，则设置 publicPath 为 <code>/my-app/</code>。</p>
</li>
<li><p>这个值也可以被设置为空字符串 (‘’) 或是相对路径 (‘./‘)，这样所有的资源都会被链接为相对路径，这样打出来的包可以被部署在任意路径</p>
<a id="more"></a>

</li>
</ul>
<h3 id="outputDir"><a href="#outputDir" class="headerlink" title="outputDir"></a>outputDir</h3><ul>
<li>默认值: <code>dist</code></li>
<li>当运行<code>vue-cli-service build</code>时生成的生产环境构建文件的目录, 每次目标目录在构建之前会被清除 (构建时传入 <code>--no-clean</code> 可关闭该行为)。</li>
</ul>
<h3 id="assetsDir"><a href="#assetsDir" class="headerlink" title="assetsDir"></a>assetsDir</h3><ul>
<li>默认值: 空字符串<code>&#39;&#39;</code></li>
<li>放置生成的静态资源(js, css, img, fonts) 的目录</li>
</ul>
<h3 id="indexPath"><a href="#indexPath" class="headerlink" title="indexPath"></a>indexPath</h3><ul>
<li>默认值: <code>&#39;index.html&#39;</code></li>
<li>指定打包生成的index.html的输出路径</li>
</ul>
<h3 id="filenameHashing"><a href="#filenameHashing" class="headerlink" title="filenameHashing"></a>filenameHashing</h3><ul>
<li>默认值:true</li>
<li>默认情况下，生成的静态资源在它们的文件名中包含了 hash 以便更好的控制缓存。然而，这也要求 index 的 HTML 是被 Vue CLI 自动生成的。如果你无法使用 Vue CLI 生成的 index HTML，你可以通过将这个选项设为 <code>false</code> 来关闭文件名哈希</li>
</ul>
<h3 id="lintOnSave"><a href="#lintOnSave" class="headerlink" title="lintOnSave"></a>lintOnSave</h3><ul>
<li><p>type: <code>Boolean</code> | <code>&#39;warning&#39;</code> | <code>&#39;default&#39;</code> | <code>&#39;error&#39;</code></p>
</li>
<li><p>默认值: <code>&#39;default&#39;</code></p>
</li>
<li><p>是否在开发环境下通过eslint-loader在每次保存时lint代码,这个值会在安装<code>@vue/cli-plugin-eslint</code>后生效</p>
</li>
<li><p>设置为<code>true</code>或者<code>&#39;warning&#39;</code>时, eslint-loader会将lint错误输出位编译警告,警告仅仅会被输出到命令行，且不会使得编译失败。</p>
</li>
<li><p>如果你希望让 lint 错误在开发时直接显示在浏览器中，你可以使用 <code>lintOnSave: &#39;default&#39;</code>。这会强制 <code>eslint-loader</code> 将 lint 错误输出为编译错误，同时也意味着 lint 错误将会导致编译失败。</p>
</li>
<li><p>设置为 <code>error</code> 将会使得 <code>eslint-loader</code> 把 lint 警告也输出为编译错误，这意味着 lint 警告将会导致编译失败。</p>
</li>
<li><p>或者，你也可以通过设置让浏览器 overlay 同时显示警告和错误：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    overlay: &#123;</span><br><span class="line">      warnings: <span class="literal">true</span>,</span><br><span class="line">      errors: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>当 <code>lintOnSave</code> 是一个 truthy 的值时，<code>eslint-loader</code> 在开发和生产构建下都会被启用。如果你想要在生产构建时禁用 <code>eslint-loader</code>，你可以用如下配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  lintOnSave: process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="configureWebpack"><a href="#configureWebpack" class="headerlink" title="configureWebpack"></a>configureWebpack</h3><ul>
<li>type: <code>Object</code> | <code>function</code></li>
<li>如果是这个值是一个对象,<a href="https://github.com/survivejs/webpack-merge" target="_blank" rel="noopener">则会通过webpack-merge</a>合并到最终的配置中</li>
<li>如果这个值是一个函数,则会接收被解析的配置作为参数,该函数既可以修改配置并不返回任何东西，也可以返回一个被克隆或合并过的配置版本。更多细节可查阅：<a href="https://cli.vuejs.org/zh/guide/webpack.html#%E7%AE%80%E5%8D%95%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F" target="_blank" rel="noopener">配合 webpack &gt; 简单的配置方式</a></li>
</ul>
<h3 id="chainWebpack"><a href="#chainWebpack" class="headerlink" title="chainWebpack"></a>chainWebpack</h3><ul>
<li>type: <code>function</code></li>
<li>是一个函数，会接收一个基于 <a href="https://github.com/mozilla-neutrino/webpack-chain" target="_blank" rel="noopener">webpack-chain</a> 的 <code>ChainableConfig</code> 实例。允许对内部的 webpack 配置进行更细粒度的修改。更多细节可查阅：<a href="https://cli.vuejs.org/zh/guide/webpack.html#%E9%93%BE%E5%BC%8F%E6%93%8D%E4%BD%9C-%E9%AB%98%E7%BA%A7" target="_blank" rel="noopener">配合 webpack &gt; 链式操作</a></li>
</ul>
<h3 id="css-loaderOptions"><a href="#css-loaderOptions" class="headerlink" title="css.loaderOptions"></a>css.loaderOptions</h3><ul>
<li><p>type: Object, 默认值:<code>{}</code></p>
</li>
<li><p>向CSS相关的loader传递选项,例如:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      css: &#123;</span><br><span class="line">        <span class="comment">// 这里的选项会传递给 css-loader</span></span><br><span class="line">      &#125;,</span><br><span class="line">      postcss: &#123;</span><br><span class="line">        <span class="comment">// 这里的选项会传递给 postcss-loader</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 设置 scss 公用变量文件</span></span><br><span class="line">      sass: &#123;</span><br><span class="line">        data: <span class="string">`@import '~@/assets/style/public.scss';`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>支持的 loader 有：</p>
<ul>
<li><a href="https://github.com/webpack-contrib/css-loader" target="_blank" rel="noopener">css-loader</a></li>
<li><a href="https://github.com/postcss/postcss-loader" target="_blank" rel="noopener">postcss-loader</a></li>
<li><a href="https://github.com/webpack-contrib/sass-loader" target="_blank" rel="noopener">sass-loader</a></li>
<li><a href="https://github.com/webpack-contrib/less-loader" target="_blank" rel="noopener">less-loader</a></li>
<li><a href="https://github.com/shama/stylus-loader" target="_blank" rel="noopener">stylus-loader</a></li>
</ul>
<p>更多细节可查阅：<a href="https://cli.vuejs.org/zh/guide/css.html#%E5%90%91%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8-loader-%E4%BC%A0%E9%80%92%E9%80%89%E9%A1%B9" target="_blank" rel="noopener">向预处理器 Loader 传递选项</a></p>
</li>
</ul>
<h3 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h3><ul>
<li>type: <code>Object</code></li>
<li>所有webpack-dev-server的选项都支持</li>
<li>有些值像 <code>host</code>、<code>port</code> 和 <code>https</code> 可能会被命令行参数覆写。</li>
<li>有些值像 <code>publicPath</code> 和 <code>historyApiFallback</code> 不应该被修改，因为它们需要和开发服务器的 <a href="https://cli.vuejs.org/zh/config/#baseurl" target="_blank" rel="noopener">publicPath</a> 同步以保障正常的工作</li>
</ul>
<h3 id="devServer-proxy"><a href="#devServer-proxy" class="headerlink" title="devServer.proxy"></a>devServer.proxy</h3><ul>
<li><p>type: <code>String | Object</code></p>
</li>
<li><p>如果前端应用和后端API服务器没有运行在同一个主机上, 则需要在开发环境下将API请求代理到API服务器</p>
</li>
<li><p><code>devServer.proxy</code> 可以是一个指向开发环境 API 服务器的字符串：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: <span class="string">'http://localhost:4000'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这会告诉开发服务器将任何未知请求 (没有匹配到静态文件的请求) 代理到http://localhost:4000。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果你想要更多的代理控制行为，也可以使用一个 <code>path: options</code> 成对的对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'&lt;url&gt;'</span>, <span class="comment">//代理服务器的地址</span></span><br><span class="line">        ws: <span class="literal">true</span>, <span class="comment">// 是否启用webSocket</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">'/foo'</span>: &#123;</span><br><span class="line">        target: <span class="string">'&lt;other_url&gt;'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="pluginOptions"><a href="#pluginOptions" class="headerlink" title="pluginOptions"></a>pluginOptions</h3><ul>
<li><p>type: <code>Object</code></p>
</li>
<li><p>用来传递第三方插件选项的,例如:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  pluginOptions: &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      <span class="comment">// 插件可以作为 `options.pluginOptions.foo` 访问这些选项。</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> VueFilenameInjector = <span class="built_in">require</span>(<span class="string">'@d2-projects/vue-filename-injector'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接路径</span></span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function"><span class="params">dir</span> =&gt;</span> <span class="built_in">require</span>(<span class="string">'path'</span>).join(__dirname, dir)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加环境变量</span></span><br><span class="line">process.env.VUE_APP_VERSION = <span class="built_in">require</span>(<span class="string">'./package.json'</span>).version</span><br><span class="line">process.env.VUE_APP_BUILD_TIME = <span class="built_in">require</span>(<span class="string">'dayjs'</span>)().format(<span class="string">'YYYY-M-D HH:mm:ss'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> publicPath = <span class="string">'/'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 根据你的实际情况更改这里</span></span><br><span class="line">  publicPath,</span><br><span class="line">  lintOnSave: <span class="literal">false</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    publicPath, <span class="comment">// 和 publicPath 保持一致</span></span><br><span class="line">    port: <span class="number">9209</span>,</span><br><span class="line">    disableHostCheck: <span class="literal">true</span>,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="comment">// '/api/workflow':&#123;</span></span><br><span class="line">      <span class="comment">//   target: 'http://10.211.16.43:3000/mock/12',</span></span><br><span class="line">      <span class="comment">//   changeOrigin:true,</span></span><br><span class="line">      <span class="comment">// &#125;,</span></span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://api.devzone.com'</span>,</span><br><span class="line">        ws: <span class="literal">false</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">'/group1'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://ys.eptok.com'</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      <span class="comment">// 设置 scss 公用变量文件</span></span><br><span class="line">      sass: &#123;</span><br><span class="line">        data: <span class="string">`@import '~@/assets/style/public.scss';`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 非开发环境</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'development'</span>) &#123;</span><br><span class="line">      config.optimization.minimizer[<span class="number">0</span>].options.terserOptions.compress.warnings = <span class="literal">false</span></span><br><span class="line">      config.optimization.minimizer[<span class="number">0</span>].options.terserOptions.compress.drop_console = <span class="literal">true</span></span><br><span class="line">      config.optimization.minimizer[<span class="number">0</span>].options.terserOptions.compress.drop_debugger = <span class="literal">true</span></span><br><span class="line">      config.optimization.minimizer[<span class="number">0</span>].options.terserOptions.compress.pure_funcs = [</span><br><span class="line">        <span class="string">'console.log'</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 默认设置: https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-service/lib/config/base.js</span></span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除懒加载模块的 prefetch preload，降低带宽压力</span></span><br><span class="line"><span class="comment">     * https://cli.vuejs.org/zh/guide/html-and-static-assets.html#prefetch</span></span><br><span class="line"><span class="comment">     * https://cli.vuejs.org/zh/guide/html-and-static-assets.html#preload</span></span><br><span class="line"><span class="comment">     * 而且预渲染时生成的 prefetch 标签是 modern 版本的，低版本浏览器是不需要的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    config.plugins.delete(<span class="string">'prefetch'</span>).delete(<span class="string">'preload'</span>)</span><br><span class="line">    <span class="comment">// 解决 cli3 热更新失效 https://github.com/vuejs/vue-cli/issues/1559</span></span><br><span class="line">    config.resolve.symlinks(<span class="literal">true</span>)</span><br><span class="line">    config</span><br><span class="line">      <span class="comment">// 开发环境</span></span><br><span class="line">      .when(</span><br><span class="line">        process.env.NODE_ENV === <span class="string">'development'</span>,</span><br><span class="line">        <span class="comment">// sourcemap不包含列信息</span></span><br><span class="line">        config =&gt; config.devtool(<span class="string">'cheap-source-map'</span>)</span><br><span class="line">        <span class="comment">// config =&gt; config.devtool('hidden-source-map')</span></span><br><span class="line">      )</span><br><span class="line">      <span class="comment">// 生产环境</span></span><br><span class="line">      .when(</span><br><span class="line">        process.env.NODE_ENV !== <span class="string">'development'</span>,</span><br><span class="line">        <span class="comment">// sourcemap不包含列信息</span></span><br><span class="line">        <span class="comment">// config =&gt; config.devtool('cheap-source-map')</span></span><br><span class="line">        config =&gt; config.devtool(<span class="string">'hidden-source-map'</span>)</span><br><span class="line">      )</span><br><span class="line">      <span class="comment">// TRAVIS 构建 vue-loader 添加 filename</span></span><br><span class="line">      .when(</span><br><span class="line">        process.env.VUE_APP_SCOURCE_LINK === <span class="string">'TRUE'</span>,</span><br><span class="line">        VueFilenameInjector(config, &#123;</span><br><span class="line">          propName: process.env.VUE_APP_SOURCE_VIEWER_PROP_NAME</span><br><span class="line">        &#125;)</span><br><span class="line">      )</span><br><span class="line">    <span class="comment">// markdown</span></span><br><span class="line">    config.module</span><br><span class="line">      .rule(<span class="string">'md'</span>)</span><br><span class="line">      .test(<span class="regexp">/\.md$/</span>)</span><br><span class="line">      .use(<span class="string">'text-loader'</span>)</span><br><span class="line">      .loader(<span class="string">'text-loader'</span>)</span><br><span class="line">      .end()</span><br><span class="line">    <span class="comment">// svg</span></span><br><span class="line">    <span class="keyword">const</span> svgRule = config.module.rule(<span class="string">'svg'</span>)</span><br><span class="line">    svgRule.uses.clear()</span><br><span class="line">    svgRule.include</span><br><span class="line">      .add(resolve(<span class="string">'src/assets/svg-icons/icons'</span>))</span><br><span class="line">      .end()</span><br><span class="line">      .use(<span class="string">'svg-sprite-loader'</span>)</span><br><span class="line">      .loader(<span class="string">'svg-sprite-loader'</span>)</span><br><span class="line">      .options(&#123;</span><br><span class="line">        symbolId: <span class="string">'d2-[name]'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .end()</span><br><span class="line">    <span class="comment">// image exclude</span></span><br><span class="line">    <span class="keyword">const</span> imagesRule = config.module.rule(<span class="string">'images'</span>)</span><br><span class="line">    imagesRule</span><br><span class="line">      .test(<span class="regexp">/\.(png|jpe?g|gif|webp|svg)(\?.*)?$/</span>)</span><br><span class="line">      .exclude.add(resolve(<span class="string">'src/assets/svg-icons/icons'</span>))</span><br><span class="line">      .end()</span><br><span class="line">    <span class="comment">// 重新设置 alias</span></span><br><span class="line">    config.resolve.alias.set(<span class="string">'@api'</span>, resolve(<span class="string">'src/api'</span>))</span><br><span class="line">    <span class="comment">// 判断环境加入模拟数据</span></span><br><span class="line">    <span class="keyword">const</span> entry = config.entry(<span class="string">'app'</span>)</span><br><span class="line">    <span class="keyword">if</span> (process.env.VUE_APP_BUILD_MODE === <span class="string">'MOCK'</span>) &#123;</span><br><span class="line">      entry.add(<span class="string">'@/mock'</span>).end()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// i18n</span></span><br><span class="line">  pluginOptions: &#123;</span><br><span class="line">    i18n: &#123;</span><br><span class="line">      locale: <span class="string">'zh-chs'</span>,</span><br><span class="line">      fallbackLocale: <span class="string">'en'</span>,</span><br><span class="line">      localeDir: <span class="string">'locales'</span>,</span><br><span class="line">      enableInSFC: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h2><ul>
<li>Babel 可以通过 <code>babel.config.js</code> 进行配置。</li>
</ul>
<h2 id="Eslint"><a href="#Eslint" class="headerlink" title="Eslint"></a>Eslint</h2><ul>
<li>ESLint 可以通过 <code>.eslintrc</code> 或 <code>package.json</code> 中的 <code>eslintConfig</code> 字段来配置。</li>
<li>更多细节可查阅 <a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-eslint" target="_blank" rel="noopener">@vue/cli-plugin-eslint</a>。</li>
</ul>
]]></content>
      <categories>
        <category>vue相关</category>
      </categories>
      <tags>
        <tag>vue webpack</tag>
      </tags>
  </entry>
</search>
